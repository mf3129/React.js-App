{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","height","width","CardList","robots","map","user","index","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filterRobots","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yOAgBgBA,EAdH,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAEzB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,iBAA6CI,OAAO,MAAMC,MAAM,QACrF,6BACI,gCAAMP,EAAN,KACA,+BAAKC,EAAL,QCiBDO,EAvBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEhB,OACA,6BAEQA,EAAOC,IAAI,SAACC,EAAMC,GAEd,OAEA,kBAAC,EAAD,CACIC,IAAOD,EACPV,GAAMO,EAAOG,GAAOV,GACpBF,KAAQS,EAAOG,GAAOZ,KACtBC,MAASQ,EAAOG,GAAOX,YCE5Ba,EAhBG,SAAC,GAAwB,IAArBC,EAAoB,EAApBA,aAElB,OACI,yBAAKZ,UAAU,OACX,2BACIA,UAAU,mCACVa,KAAK,SACLC,YAAY,gBACZC,SAAYH,MCObI,EAVA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBjB,OAAQ,UAChEc,EAAMI,WC8DJC,G,kBAvDX,aAAe,IAAD,8BACV,+CAeJC,eAAiB,SAACC,GACd,EAAKC,SAAU,CAACC,YAAaF,EAAMG,OAAOC,SAf1C,EAAKC,MAAQ,CACTvB,OAAQ,GACRoB,YAAa,IAJP,E,iFAQO,IAAD,OACjBI,MAAM,8CACJC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACnB,OAAQ4B,Q,+BAWhC,IAAD,EACyBC,KAAKN,MAA9BvB,EADA,EACAA,OAAQoB,EADR,EACQA,YACTU,EAAe9B,EAAO+B,OAAO,SAAAC,GACjC,OAAOA,EAAMzC,KAAK0C,cAAcC,SAASd,EAAYa,iBAGxD,OAAQjC,EAAOmC,OAGR,yBAAKzC,UAAU,MACX,wBAAIA,UAAU,MAAd,uBACA,kBAAC,EAAD,CAAWY,aAAeuB,KAAKZ,iBAC/B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUjB,OAAQ8B,MAN1B,6C,GA/BMM,cCHEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC,gB","file":"static/js/main.7e9e6aeb.chunk.js","sourcesContent":["import React from 'react'; \n\nconst Card = ({ name, email, id }) => { //Destructuring to use name/email instead of prop.name and email\n\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} height='200' width='200'/>\n            <div>\n                <h2> {name} </h2> \n                <p> {email} </p>\n            </div>\n        </div>\n    );  \n}\n//Because this is javascript expression, we must wrap the props in curly braces. Thats\n//the way it works in JSX. \n export default Card;  ","import React from 'react'; \nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\n    return (\n    <div>\n        { //Destucturing the javascript  \n            robots.map((user, index) => {\n\n                return (\n\n                <Card \n                    key = {index}\n                    id = {robots[index].id} \n                    name = {robots[index].name} \n                    email = {robots[index].email} \n                />\n              );\n            })\n        }\n    </div>\n    );\n\n}\n\nexport default CardList; \n\n\n","import React from 'react';\n\nconst SearchBox = ( { searchChange } ) => {\n\n    return (\n        <div className='pa2'>\n            <input \n                className='pa3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='search robots' \n                onChange= { searchChange } //Running the function searchChange everytime the event happens. \n            />\n        </div>\n    );\n    \n}\n\n\nexport default SearchBox; ","import React from 'react';\n\n\n//children\n//Scroll can use children as a way to render its children. \n//Double brackets for div style since we are first deconstruncting the javascript and we are returning an object which can have css styles.\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}> \n            {props.children}\n        </div>\n    )\n}\n\n\n\nexport default Scroll; \n\n\n\n\n\n","import React, { Component } from 'react';\nimport CardList from '../components/CardList'; \n// import { robots } from './robot.js'; \nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll'; \nimport './App.css';\n\n//STATE - Is what describes you app react.js 3 vid 9 min  //STATE >> PROP\n// const state = {\n//     robots: robots,\n//     searchfield: ''\n// }\n\n//Because App.js has a states that change we call the file smart components as opposed to CardList & searchbox which just contain functions and we call them components. \n\nclass App extends Component {\n\n    constructor() {\n        super()\n        this.state = { //States are things that can change in the app. \n            robots: [],\n            searchfield: ''\n        }\n    }\n\n    componentDidMount() {\n       fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({robots: users}))\n\n    //    this.setState( {robots: robots } ); //Used this when initially loading data from robots.js file as opposed to calling from an api.\n    }\n \n    onSearchChange = (event) => {\n        this.setState( {searchfield: event.target.value} )\n        // console.log(filterRobots);\n    }\n\n\n    render() {\n    const  { robots, searchfield }  = this.state; \n      const filterRobots = robots.filter(robot => {\n        return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n     })\n\n     return !robots.length ? \n            <h1> Loading </h1> :\n            (\n            <div className='tc'>\n                <h1 className='f1'> REACT.JS__Project </h1>\n                <SearchBox searchChange={ this.onSearchChange }/>\n                <Scroll>\n                    <CardList robots={filterRobots}/>\n                </Scroll>\n                \n            </div>\n            );\n     }\n\n}\n\n// const App = () => {\n//     return (\n//     <div className='tc'>\n//         <h1> RoboFriends</h1>\n//         <SearchBox />\n//         <CardList robots={robots}/>\n//     </div>\n//     );\n\n// }\n\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'; //Creating this to load all cards in 1 file. \nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}